"""   
강의: 이미지 학습과 CNN -> 1강 2강

딥러닝으로 이미지 학습시키기

이 이미지가 신발인지 상의인지 하의인지 등을 구분하는 딥러닝모델을 만들어보자

--> 자율주행에서 사용하기도. 실시간으로 1초에 전면사진 많이 찍어서 그게 차인지, 사람인지 등..
--> 암세포인지 CT 사진 엄청보고 학습한후 환자사진보고 그게 암세포인지 진단할때도 사용


그렇담 어떻게 사진을 뉴럴네트워크(히든 레이어)에 넣을까?
뉴럴 네트웤에 넣을 수 있는건 무조건 숫자뿐임. 글자도 안됨. 그래야 w값 덧셈뺄셈 등을 할 수 있어서..

->이미지는 확대해보면 하나의 네모칸(픽셀)으로 이루어짐.
각 픽셀은 색상정보rgb값이 숫자로 저장되어 있음. 그래서 그냥
각각 하나의 픽셀의 숫자값을 노드하나로 만들어서 히든레이어안에 넣으면됨. 이게다임.

*칼라사진은 rgb색상값이 60, 140, 88 이렇게 3가지 숫자값으로 나옴. 근데 흑백사진은 0~255중 하나의 숫자값으로만 나옴.
그래서 이 강의에선 흑백사진만 다뤄볼거임. 모델 학습시간 짧고해서..

쨋든 그래서 각 노드만들고 한 후 예측값과 실제값(이 사진은 강아지이다 등) 비교로 총손실값도 계산해볼수있음..이게 이미지학습방법의 끝임.

"""
import tensorflow as tf
import matplotlib.pyplot as plt  # 이미지를 파이썬으로 띄워서 볼 수 있는 라이브러리. 터미널에 pip install matplotlib 해서 설치해줬음.


(trainX, trainY ), (testX, testY) = tf.keras.datasets.fashion_mnist.load_data()  #텐서플로우에서 제공해주는 몇가지 데이터셋 중 하나 

"""
print(trainX[0]) #이러면 trainX의 이미지 하나 가져옴
print(trainX.shape) #이러면 데이터가 어떤 형태로 몇개있는지 알 수 있었음. (60000, 28, 28) 이런식으로 출력이 나올거임. 이건 뒤에서부터 해석해서 28개의 숫자가 들어있는 리스트가 28개 있고, 그게 6만개 있다는 소리임.
print(trainY) #정답값 6만개가 리스트로 정렬되어 있을거임 [9 0 0 ...3 0 5] 이런식으로.
#정답값을 label이라고 많이 표현함. 이유는..

# class_names = ['티셔츠', 'trouser', 'pullover', 'Dress'...] 이런식으로 값이 있고 정답값의 숫자 0이나 9 등은 이 리스트의 index값임. 즉 정답값도 숫자로 표기되어야해서 이렇게함.
"""

# trainX는 쇼핑몰이미지 6만개. trainY는 정답 6만개 (학습하기좋게 이미지들이 숫자값으로 미리 가공된 상태인 데이터 셋들임 )
# 근데 testX는 테스트용 x데이터 셋. testY도 테스트용 y데이터 셋임. 각각 1만개 정도의 테스트용 이미지셋이 들어가 있을거임.

"""
위에는..
(어쩌구, 저쩌구), (어쩌구, 저쩌구) 라고 저장된 데이터들을 각각 변수로 쉽게 빼주는 파이썬 문법임. 
몰라도됨. 이거에서만 쓰고 실제 하드에 있는 이미지 로딩할땐 이런거 절대 안씀.
"""

"""
# 숫자로 이뤄진 이미지를 실제 사진으로 보고싶어서 쓴 matplotlib 라이브러리.
plt.imshow(trainX[0]) #보고자 하는 숫자로된 행렬 이미지값을 imshow에 넣고
plt.gray() # 흑백으로 보여줌. 원래사진이 흑백이었지만, gray()안하면 이 라이브러리는 보기쉽게 대충 색상 입혀서 보여줌. 
plt.colorbar() # 이미지옆에 색상숫자값이 어느정도인지 막대바로 보여줌. 유용
plt.show() # 이렇게 해주고 실행하면 사진 보여줌

"""

# 1. 모델 만들기 
model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, input_shape = (28,28),  activation = "relu"), # relu 활성함수는 음수값은 다 0으로 만들어주는 녀석임. 나중에 배우는 convolution layer에서 자주씀.
    tf.keras.layers.Dense(64, activation = "relu"), # relu 쓰는 이유는 이미지는 0~255사이의 정수값이 들어가므로 음수나올일 절대 없으므로 이거 많이들 넣어줌.
    tf.keras.layers.Flatten(),  # 이거 안해주면 마지막 레이어의 결과값이 2차원으로..행렬로 나올거임..그걸 방지하고 [ 0.1  0.2  ....] 등으로 1차원으로 나오게 해주는 함수임. 즉 행렬을 1차원으로 압축해주는 레이어임.. 결론은 이렇게해서 마지막 레이어 결과값을 잘 디자인해줘야 에러없음.
    tf.keras.layers.Dense(10, activation = "softmax" ), # 마지막 레이어는 활성함수 있어도되고 없어도됨. 근데 여기서 넣은 이유는 결과를 0~1사이로 압축해서 보고싶기 때문임. softmax는 결과값 0~1로 압축해줌. 여러 카테고리 중 이 사진은 어떤 카테고리에 속할 확률이 높은지 알고싶을때 등에 사용
                                                        # sigmoid: 결과를 0~1로 압축은 동일함. 근데 binary예측문제에서 자주 사용 (ex. 대학원 붙는다/안붙는다...개다 고양이다...즉 0인지 1인지..) -> 마지막 노드갯수는 무조건 1개                   
])

"""
 - 원하는 예측결과는 티셔츠인지/trouser인지 Pullover인지 Dress..일 확률임

 이미지학습에서 확률예측문제라면
 1. 일단 마지막 레이어 노드수를 카테고리 갯수(티셔츠인지..드레스인지 등..)만큼 넣기 --> 결과값은  [ 0.2  0.4  .....] 이런식으로 카테고리 갯수만큼의 숫자가 들어있는 리스트가 나올거임
 2. loss 함수로는 cross entropy 쓰기

"""

"""
# 모델 아웃라인 출력해보기
-> 내가 모델 잘 만들었는지 한눈에 볼 수 있는 고마운 함수 있음 -> summary()
근데 이거 쓰려면 모델의 첫 레이어안에 input_shape = (28,28) 이거 넣어줘야함. 인자값은 데이터 1개의 shape 넣으면됨. 여기선 이미지색상값 28 x 28 이라서 저렇게 넣어줌.
"""
# model.summary()



# 2. 모델 컴파일 - 3가지정도 넣어야함
model.compile( loss = "sparse_categorical_crossentropy", optimizer = "adam", metrics =['accuracy'])

"""
# 여러 카테고리 예측문제에서 쓰는 loss함수
1. sparse_categorical_crossentropy : trainY가, 즉 label들이 0,1,2 등 정수로 되어있을때 사용
2. categorical_crossentropy: trainY가 원핫인코딩 되어있을때 사용

* 원핫인코딩이란?  -----------------------------------

첫째 카테고리에 속하면 [1,0,0,0]

둘째 카테고리에 속하면 [0,1,0,0]

셋째 카테고리에 속하면 [0,0,1,0]

등 이렇게요. 

이걸 원핫인코딩이라고 합니다. 

그래서 [1, 3, 0, 2 ] 라는 정답데이터를 원핫인코딩하면 

[ [0,1,0,0] [0,0,0,1] [1,0,0,0] [0,0,1,0]]    이렇게됨.
 -----------------------------------------------------------
"""



# 3. 모델 학습
model.fit(trainX, trainY, epochs = 5)



